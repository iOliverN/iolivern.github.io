<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oliver Nguyen</title>
    <link>https://iOliverNguyen.github.io/w/</link>
    <description>Recent content in Oliver Nguyen</description>
    
    <language>en-us</language>
    <copyright>Oliver Nguyen</copyright>
    <lastBuildDate>Tue, 31 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://iOliverNguyen.github.io/w/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Commit your code in style with git.emoji üéâ</title>
      <link>https://iOliverNguyen.github.io/w/git.emoji/</link>
      <pubDate>Tue, 31 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/git.emoji/</guid>
      <description>Have you ever get bored with the same old commit messages, all starting with &amp;ldquo;update&amp;rdquo;, &amp;ldquo;fix&amp;rdquo; or &amp;ldquo;feat&amp;rdquo;? Do you know that emojis are the latest advancement in human language and communication? They can convey emotions and ideas in a single character and make your messages alive! Think about it, even when aliens come to Earth, they will quickly understand the meaning of these little characters! üòé
New year, new you!</description>
    </item>
    
    <item>
      <title>The power of diff in testing - Part 1: SQL queries and mocks</title>
      <link>https://iOliverNguyen.github.io/w/diff.testing/</link>
      <pubDate>Thu, 26 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/diff.testing/</guid>
      <description>A new day at work Suppose that you, a good software engineer, just got hired by an e-commerce business. And you are joining a team to work on the profile service to manage customers and their addresses.
There are a Customer and an Address struct, with a couple of gorm tags for the database schema:
type Customer struct { ID uuid.UUID `gorm:&amp;#34;type:uuid;primaryKey&amp;#34; json:&amp;#34;id&amp;#34;` Name string `json:&amp;#34;name&amp;#34;` Age int `json:&amp;#34;age&amp;#34;` Gender string `json:&amp;#34;gender&amp;#34;` Email string `gorm:&amp;#34;uniqueIndex&amp;#34; json:&amp;#34;email&amp;#34;` Phone string `json:&amp;#34;phone&amp;#34;` Occupation string `json:&amp;#34;occupation&amp;#34;` Addresses []Address `gorm:&amp;#34;foreignKey:CustomerID&amp;#34; json:&amp;#34;addresses&amp;#34;` Languages []string `gorm:&amp;#34;type:text[]&amp;#34; json:&amp;#34;languages&amp;#34;` } type Address struct { ID uuid.</description>
    </item>
    
    <item>
      <title>ezpkg.io/conveyz: Understanding the Implementation of FConvey</title>
      <link>https://iOliverNguyen.github.io/w/conveyz/</link>
      <pubDate>Fri, 20 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/conveyz/</guid>
      <description>The FConvey function is a standout feature of ezpkg.io/conveyz, designed to simplify focused testing in Go. Unlike the original smartystreets/goconvey framework, which requires developers to set FocusConvey at every nested block level, FConvey is smarter. It ensures that focusing on a single block propagates to all relevant nested and parent blocks, streamlining the debugging process.
In this article, we dive deep into the implementation of FConvey, why the original FocusConvey does require manual setting at every level, and how FConvey solves the problem.</description>
    </item>
    
    <item>
      <title>iter.json: A Powerful and Efficient Way to Iterate and Manipulate JSON in Go</title>
      <link>https://iOliverNguyen.github.io/w/iter.json/</link>
      <pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/iter.json/</guid>
      <description>Have you ever needed to modify unstructured JSON data in Go? Maybe you‚Äôve had to delete password and all blacklisted fields, rename keys from camelCase to snake_case, or convert all number ids to strings because JavaScript does not like int64? If your solution has been to unmarshal everything into a map[string]any using encoding/json and then marshal it back&amp;hellip; well, let‚Äôs face it, that‚Äôs far from efficient!
What if you could loop through the JSON data, grab the path of each item, and decide exactly what to do with it on the fly?</description>
    </item>
    
    <item>
      <title>Errors, Errors Everywhere: How We Centralized and Structured Error Handling</title>
      <link>https://iOliverNguyen.github.io/w/namespace.error/</link>
      <pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/namespace.error/</guid>
      <description>Handling errors in Go is simple and flexible ‚Äì yet no structure!
It&amp;rsquo;s supposed to be simple, right? Just return an error , wrapped with a message, and move on. Well, that simplicity quickly turns into chaotic as our codebase grows with more packages, more developers, and more &amp;ldquo;quick fixes&amp;rdquo; that stay there forever. Over time, the logs are full of &amp;ldquo;failed to do this&amp;rdquo; and &amp;ldquo;unexpected that&amp;rdquo;, and nobody knows if it‚Äôs the user‚Äôs fault, the server‚Äôs fault, buggy code, or it&amp;rsquo;s just a misalignment of the stars!</description>
    </item>
    
    <item>
      <title>Welcome to my blog!</title>
      <link>https://iOliverNguyen.github.io/w/welcome/</link>
      <pubDate>Wed, 27 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/welcome/</guid>
      <description>Hi! I&amp;rsquo;m Oliver Nguyen, a software engineer working with Go &amp;amp; JS. üëã
I enjoy writing code and building tools to make writing code even faster! I love working in start-up environments, where I get to build everything from the ground up and improve them as companies grow.
Along the way, I share my knowledge and write about best practices in software development, covering topics like tooling, architecture, and coding practice.</description>
    </item>
    
    <item>
      <title>Implement a Distributed State Machine with Redis to Migrate Billions of Records</title>
      <link>https://iOliverNguyen.github.io/w/migrate/</link>
      <pubDate>Sun, 20 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/migrate/</guid>
      <description>As a start-up company, we started with a simple architecture: All data were stored in a single centralized Postgres instance, shared by a few services. It has been working well and allows us to move fast, deliver features, enter the market, acquire clients, and grow exponentially.
Fast forward a couple of years, today we have thousands of clients and billions of records, it&amp;rsquo;s time to migrate the top tables from Postgres to a better solution.</description>
    </item>
    
    <item>
      <title>How to live on 24 hours a day ‚Äì by Arnold Bennett</title>
      <link>https://iOliverNguyen.github.io/w/live.24h/</link>
      <pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/live.24h/</guid>
      <description>‚ÄúHow to Live on 24 Hours a Day‚Äù is a classic self-help book written by Arnold Bennett, first published in 1910. The book is a practical guide on time management and personal development, emphasizing the importance of making the most out of each day.
Bennett argues that time is the most valuable resource we have and that many people waste it without realizing it. He suggests simple but effective ways to structure your day to include both work and personal development activities, such as reading, reflecting, and improving oneself.</description>
    </item>
    
    <item>
      <title>Upgrade your scripts using &#39;direnv&#39; and &#39;run&#39; script</title>
      <link>https://iOliverNguyen.github.io/w/direnv.run/</link>
      <pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/direnv.run/</guid>
      <description>In JavaScript/Node world, we usually store scripts in package.json and run them using npm. In other worlds, we use Makefile or create a directory and put all our scripts there. But there is a better way to manage and run scripts for your team. No, I&amp;rsquo;m not talking about Warp or other pricey fancy tools.
I will share about direnv and our old friend bash: How we are using them to effectively write and manage scripts as a team.</description>
    </item>
    
    <item>
      <title>Refactor: GoroutineTracker with unnecessary usage of reflect</title>
      <link>https://iOliverNguyen.github.io/w/go.tracker/</link>
      <pubDate>Tue, 02 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/go.tracker/</guid>
      <description>Today, I encountered this code in my company codebase (the code and comments are rewritten for demo purpose and do not include any proprietary code):
type GoroutineTracker struct { wg sync.WaitGroup // ... some other fields } // Go starts a new goroutine and tracks it with some metrics. func (g *GoroutineTracker) Go(ctx context.Context, name string, f any, args ...any) { fn := reflect.TypeOf(f) if fn.Kind() != reflect.Func { panic(&amp;#34;must be function&amp;#34;) } if fn.</description>
    </item>
    
    <item>
      <title>ezpkg.io - Collection of packages to make writing Go code easier</title>
      <link>https://iOliverNguyen.github.io/w/ezpkg/</link>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/ezpkg/</guid>
      <description>As I work on various Go projects, I often find myself creating utility functions, extending existing packages, or developing packages to solve specific problems. Moving from one project to another, I usually have to copy or rewrite these solutions. So I created ezpkg.io to have all these utilities and packages in one place. Hopefully, you&amp;rsquo;ll find them useful as well.

The logo is Gopherz - which I created using DALL-E  Let&amp;rsquo;s look at some problems that these packages are solving.</description>
    </item>
    
    <item>
      <title>GitHub PRs on MacOS Menu Bar</title>
      <link>https://iOliverNguyen.github.io/w/github.swiftbar/</link>
      <pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/github.swiftbar/</guid>
      <description>I usually push a lot of PRs in form of stacked PRs to GitHub. It&amp;rsquo;s quite annoying to go through each PR to see the check status. So I created this plugin to show my PRs on the menu bar. ‚Äî Now, everything is just a click away!
Features 1. Top PRs section  List of your chosen PRs, sorted by your order. You can customize the list of PRs in this section by updating the file github.</description>
    </item>
    
    <item>
      <title>TIL: String type with a specific length in TypeScript</title>
      <link>https://iOliverNguyen.github.io/w/microuuid/</link>
      <pubDate>Sat, 26 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/microuuid/</guid>
      <description>We&amp;rsquo;ll declare a Phantom Type:
type StringN&amp;lt;N&amp;gt; = string &amp;amp; { length: N; readonly X: unique symbol; } const isStringN = &amp;lt;N extends number&amp;gt;(length: N, s: string): s is StringN&amp;lt;N&amp;gt; =&amp;gt; s.length == length; export const stringN = &amp;lt;N extends number&amp;gt;(length: N, s: string): StringN&amp;lt;N&amp;gt; =&amp;gt; { if (!isStringN(length, s)) throw new Error(`input must have length ${length}`); return s; } Then we can use it as below:
export type MicroUuid = StringN&amp;lt;4&amp;gt;; export const microUuid = () =&amp;gt; stringN(4, newUuid().</description>
    </item>
    
    <item>
      <title>TIL: console.log with color</title>
      <link>https://iOliverNguyen.github.io/w/logcolor/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/logcolor/</guid>
      <description>We can use this pattern to output log with color in browser by adding CSS:
const logger = (name) =&amp;gt; ({ info: console.info.bind(console, `%c${name}: %s`, &amp;#39;color: #56d74b&amp;#39;), verbose: console.debug.bind(console, `%c${name}: %s`, &amp;#39;color: #70818e&amp;#39;), }) </description>
    </item>
    
    <item>
      <title>Building flow compiler for sending campaigns and auto reply</title>
      <link>https://iOliverNguyen.github.io/w/flow.compiler/</link>
      <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/flow.compiler/</guid>
      <description>At work, I&amp;rsquo;m working on the flow compiler, which compile from flow documents into ETA flow descriptors. The use cases are to provide our users the ability to automatically response to their customers&#39; messages. Users can define their own flow and customize auto reply behaviours. This article gives a look into my work. Also see related article.
 Package flow implements the flow document compiler and runtime controller. The compiler is responsible for parsing the flow document and compiling it into a specific format for that flow document type, and can be executed by a runtime engine.</description>
    </item>
    
    <item>
      <title>TIL: Auto-reload a command when files changed using entr</title>
      <link>https://iOliverNguyen.github.io/w/entr/</link>
      <pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/entr/</guid>
      <description>While working with Go and JavaScript, we have tools available for auto reloading the server when the code changes. For JavaScript, we even have hot reload which reloads part of the page without reloading the whole page. But for Python, we don&amp;rsquo;t have such tools, I tried livereload, but it does not work well for nested directories. So I decided to do it myself. And there is a tool called entr which helps run a command when some file changes.</description>
    </item>
    
    <item>
      <title>Pull data from HackerNews API and dump to JSON files</title>
      <link>https://iOliverNguyen.github.io/w/hackernews/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/hackernews/</guid>
      <description>I wrote a simple script to download the HackerNews data from HackerNews API. It downloads the data in JSON format and stores it as a collection of files. The first time it runs, it will create the directory data to store the data. Subsequent runs will update the data in the directory.
At the time of this writing, the HackerNew database has about 35 million items.
Usage git clone https://github.com/iOliverNguyen/hackernews-dump cd hackernews direnv allow go run .</description>
    </item>
    
    <item>
      <title>Visualize flow documents and ETA flow descriptors</title>
      <link>https://iOliverNguyen.github.io/w/flow.doc/</link>
      <pubDate>Wed, 15 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/flow.doc/</guid>
      <description>At work, I&amp;rsquo;m working on the flow compiler, which compile from flow documents into ETA flow descriptors. You can read more details in this article.
Flow documents are a collection of nodes and edges, which are JSON objects. They are used to describe the flow of an automation chatbot. The flow compiler takes a flow document and compile it into an ETA flow descriptor, that is used by the ETA engine to run the flow.</description>
    </item>
    
    <item>
      <title>Working with Stacked PRs using git-branchless, git-autofixup, and git-pr</title>
      <link>https://iOliverNguyen.github.io/w/stacked.prs/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/stacked.prs/</guid>
      <description>I usually work with stacked PRs. It is a great way to organize my work and keep my commits small. This empowers separation of concern and limit scope of each PR. Reviewers can go through each PR and review them one by one. Smaller changes, better feedback!
 I was using sapling. It worked really well in the first month, but the honeymoon ended too soon. Read more... Using sapling, I can view stacked commits with sl smart logs, edit many files and make changes to many commits at the same time with sl absorb, have the stack automatically rebase after each change, and push these commits as multiple stacked GitHub PRs with a single sl pr command.</description>
    </item>
    
    <item>
      <title>TIL: Where does Github CLI store its credentials?</title>
      <link>https://iOliverNguyen.github.io/w/github.cli/</link>
      <pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/github.cli/</guid>
      <description>When using sapling, it can access my github with my credentials by asking me to gh auto login. I was wondering where it stores these credentials: in the keychain, in a file, in the environment? It&amp;rsquo;s here:
$ cat ~/.config/gh/hosts.yml github.com: user: iOliverNguyen oauth_token: gho_‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà git_protocol: https </description>
    </item>
    
    <item>
      <title>Make goconvey work with gomega assertion</title>
      <link>https://iOliverNguyen.github.io/w/goconvey.gomega/</link>
      <pubDate>Sun, 25 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/goconvey.gomega/</guid>
      <description>At work, we use gomega for testing. It works well, until one day it becomes too verbose and goconvey becomes a better fit. To prevent the repository from using two different sets of assertion functions, I decided to write an adapter to make goconvey work with gomega assertion functions.
gomega gomega is a testing framework for Go. Here&amp;rsquo;s what it looks like:
package example_test import ( &amp;#34;fmt&amp;#34; &amp;#34;testing&amp;#34; . &amp;#34;github.com/onsi/ginkgo&amp;#34; .</description>
    </item>
    
    <item>
      <title>Make sapling work with direnv</title>
      <link>https://iOliverNguyen.github.io/w/sapling.direnv/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/sapling.direnv/</guid>
      <description>In the last post, I shared my experience with Sapling, Meta‚Äôs new Git client. It requires some workaround with direnv. This post explains the change in details.
At work, we are using direnv for quickly managing environment variables on our repository. When we cd into a directory, or a subtree, it automatically detects the file .envrc in the current directory (or the nearest parent directory), loads environment variables, and execute predefined commands.</description>
    </item>
    
    <item>
      <title>My first impressions of Sapling ‚Äî Meta‚Äôs new Git client</title>
      <link>https://iOliverNguyen.github.io/w/sapling/</link>
      <pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/sapling/</guid>
      <description>Sapling is a new source control system developed by Meta. Recently, it gains the ability to work with GitHub. I&amp;rsquo;m curious about how it works, so I decided to give it a try and end up using it daily on my company&amp;rsquo;s repositories. If you want to try it out, check their documentation here.
Stacked PRs When developing, I usually create a single commit for each PR and stack them together.</description>
    </item>
    
    <item>
      <title>The Immune System: What happens when you get a small cut?</title>
      <link>https://iOliverNguyen.github.io/w/immune/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/immune/</guid>
      <description>We know that our blood contains white blood cells. And we probably heard of macrophages and T-Cells. But the immune system has so much more. The book Immune from Philipp Dettmer, the author of Kurzgesagt channel, will provide insights into the beautiful mechanisms of our immune system. This article is my summary of our immune system, what they are and how they protect our body.
The immune system can be divided into the Innate immune system and the Adaptive immune system.</description>
    </item>
    
    <item>
      <title>TIL: Packing web app as desktop app on Mac without Electron</title>
      <link>https://iOliverNguyen.github.io/w/til.mac.app/</link>
      <pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/til.mac.app/</guid>
      <description>gluon Recently, I found gluon. It is a framework for building desktop applications using web technologies. Unlike Electron, it uses the System installed Chromium or Firefox instead of the bundled Chromium. This makes it possible to use the same version of Chromium or Firefox as the one used by the user&amp;rsquo;s browser. This also makes the application significantly smaller. At the time of this TIL, the gluon framework is only a few weeks old.</description>
    </item>
    
    <item>
      <title>Latest JavaScript features in 2022</title>
      <link>https://iOliverNguyen.github.io/w/js2022/</link>
      <pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/js2022/</guid>
      <description>JavaScript is changing fast with a lot of new and exciting features to help us - developers write code better and better. These features have been released for a while. Let‚Äôs check them out!
1. Private fields Previously, all class fields must be defined in the constructor. And there is no private fields. All fields can be accessed from outside. Of course, there are tricks with scope to make some variables inaccessible.</description>
    </item>
    
    <item>
      <title>TIL: File descriptor 3</title>
      <link>https://iOliverNguyen.github.io/w/fd3/</link>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/fd3/</guid>
      <description>Linux There are three standard file descriptions, STDIN, STDOUT, and STDERR. They are assigned to 0, 1, and 2 respectively.
File descriptor 3, 4 and so on can be accessed at:
/proc/12345/fd/3 I found it when looking at this Patchset. Chromium open --remote-debugging-pipe at file descriptor 3 for output and file descriptor 4 for input.
Windows? </description>
    </item>
    
    <item>
      <title>TIL: git am</title>
      <link>https://iOliverNguyen.github.io/w/git/</link>
      <pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/git/</guid>
      <description>TIL: Git How to apply a patch from github into the current repository gh pr diff --patch 4 | git am git am Apply a series of patches from a mailbox.</description>
    </item>
    
    <item>
      <title>TIL: 10 most relaxing songs to reduce anxiety, according to neuroscientists</title>
      <link>https://iOliverNguyen.github.io/w/relax.songs/</link>
      <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/relax.songs/</guid>
      <description>According to neuroscientists, music can reduce anxiety and stress. They suggested a list of the ten most relaxing songs to reduce anxiety:
 &amp;ldquo;Weightless,&amp;rdquo; by Marconi Union &amp;ldquo;Electra,&amp;rdquo; by Airstream &amp;ldquo;Mellomaniac (Chill Out Mix),&amp;rdquo; by DJ Shah &amp;ldquo;Watermark,&amp;rdquo; by Enya &amp;ldquo;Strawberry Swing,&amp;rdquo; by Coldplay &amp;ldquo;Please Don&amp;rsquo;t Go,&amp;rdquo; by Barcelona &amp;ldquo;Pure Shores,&amp;rdquo; by All Saints &amp;ldquo;Someone Like You,&amp;rdquo; by Adele &amp;ldquo;Canzonetta Sull&amp;rsquo;aria,&amp;rdquo; by Mozart &amp;ldquo;We Can Fly,&amp;rdquo; by Rue du Soleil (Caf√© Del Mar)  The top song is especially designed to reduce anxiety.</description>
    </item>
    
    <item>
      <title>TIL: Run Go tests inside WASM</title>
      <link>https://iOliverNguyen.github.io/w/wasmgo.testing/</link>
      <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/wasmgo.testing/</guid>
      <description>const go = new Go(); WebAssembly.instantiateStreaming(fetch(&#34;go/exec.wasm&#34;), go.importObject).then((result) = { go.run(result.instance); console.log(&#39;loaded wasm&#39;); });   Given the string  It should have length   &amp;nbsp;     const form$ = document.querySelector(&#39;#box1 form&#39;); const inputStr$ = document.querySelector(&#39;#box1 input[name=input-string]&#39;); const inputLen$ = document.querySelector(&#39;#box1 input[name=input-length]&#39;); const output$ = document.querySelector(&#39;#box1 .output&#39;); form$.addEventListener(&#39;submit&#39;, (e) = { e.preventDefault(); let output = wasmExecute(inputStr$.value, inputLen$.value) || &#39;&amp;nbsp;&#39;; output = output.replaceAll(&#39;\n&#39;, &#39;
&#39;); output$.</description>
    </item>
    
    <item>
      <title>TIL: WASM with Go and run it inside browser</title>
      <link>https://iOliverNguyen.github.io/w/wasmgo/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/wasmgo/</guid>
      <description>const go = new Go(); WebAssembly.instantiateStreaming(fetch(&#34;go/uuid.wasm&#34;), go.importObject).then((result) = { go.run(result.instance); });   Number of UUIDs:   &amp;nbsp;     const form$ = document.querySelector(&#39;#box1 form&#39;); const input$ = document.querySelector(&#39;#box1 .input&#39;); const output$ = document.querySelector(&#39;#box1 .output&#39;); console.log(&#39;xx&#39;) form$.addEventListener(&#39;submit&#39;, (e) = { e.preventDefault(); console.log(&#39;xx&#39;) let output = wasmGenerateUUIDs(input$.value) || &#39;&amp;nbsp;&#39;; output = output.replaceAll(&#39;\n&#39;, &#39;
&#39;); output$.innerHTML = output; })  Enter 1-10 in the above box. It should output UUIDs.</description>
    </item>
    
    <item>
      <title>TIL: Ultralearning, by Scott Young</title>
      <link>https://iOliverNguyen.github.io/w/untralearning/</link>
      <pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/untralearning/</guid>
      <description>Ultralearning is a book from Scott Young. He spent time learning a lot. Like spending 1 year in 4 non-English countries, each country in 3 months, to learn speaking foreign languages.
Make a metalearning map Design your goals and scopes. Determine exactly what you want at the end. Spend the first 10% of time to answer:
 What concepts do I need to understand? What facts do I have to memorize?</description>
    </item>
    
    <item>
      <title>TIL: Include HTML file in a post with Hugo</title>
      <link>https://iOliverNguyen.github.io/w/gohugo/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/gohugo/</guid>
      <description>Shortcode are simple snippets inside your content files calling built-in or custom templates.
Include HTML file in a post Create layouts/shortcodes/include-html.html:
{{ $file := .Get 0 }} {{ (printf &amp;#34;%s%s&amp;#34; .Page.File.Dir $file) | readFile | safeHTML }} Then use it in your content files:
{{‚Äã&amp;lt; include-html &amp;#34;embedded.html&amp;#34; &amp;gt;}} </description>
    </item>
    
    <item>
      <title>TIL: Better Memory</title>
      <link>https://iOliverNguyen.github.io/w/memory/</link>
      <pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/memory/</guid>
      <description>Memory tips by BigThink.com
 Chronic stress is really bad for our memory. It make us tired and loose attention. Stress hormones mobilize your brain and body to respond, to fight, to flee, to react quickly - not to think. Get enough sleep. If you don&amp;rsquo;t get enough sleep, your hippocampus might not have enough time to consolidate memories. You remember when you pay attention. Don&amp;rsquo;t multitask. Repetition is good. Self testing.</description>
    </item>
    
    <item>
      <title>TIL: Beware of Nil UUID when updating database with gorm!</title>
      <link>https://iOliverNguyen.github.io/w/db.nil.uuid/</link>
      <pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/db.nil.uuid/</guid>
      <description>WHERE conditions required At work, we are using gorm for dealing with database. It&amp;rsquo;s a popular SQL manipulation library in Go.
But recently, we got a scary error:
can not update row: id=00000000-0000-0000-0000-000000000000 WHERE conditions required Which happened from this code snippet:
db, _ := gorm.Open(...) paper := &amp;amp;Paper{ ID: updateID, Name: &amp;#34;new name&amp;#34;, } db.Update(paper) The above code will generate the following SQL statement:
UPDATE &amp;#34;paper&amp;#34; SET &amp;#34;name&amp;#34; = $1, &amp;#34;updated_at&amp;#34; = $2 WHERE &amp;#34;paper&amp;#34;.</description>
    </item>
    
    <item>
      <title>Compare and swap in Redis</title>
      <link>https://iOliverNguyen.github.io/w/redis.cas/</link>
      <pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/redis.cas/</guid>
      <description>Compare and swap Compare and swap is a familiar concept of atomic operation, for dealing with race condition. Suppose we want to build a lock for multiple instances to execute some command, and only one can be executed at a given time. An instance must wait for the lock to be released before it can take.
Instance 1: Current value is empty, set it to 1 and take the lock. Instance 2: Current value is not empty, wait.</description>
    </item>
    
    <item>
      <title>Validate zero enum value in Protocol Buffer</title>
      <link>https://iOliverNguyen.github.io/w/proto.enum/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/proto.enum/</guid>
      <description>How to validate that a Protobuf message does not contain enum fields with zero value? Turn out that is not supported directly by Protobuf! We need to look into how protojson package is implemented.
More and more companies are adopting gRPC with Protobuf for communication between internal services. It has the benefits of high performance, supporting multiple programming languages, and being backed by Google with a great ecosystem around.
For communication with front-end and external services, Protobuf can be marshaled to JSON format.</description>
    </item>
    
    <item>
      <title>Eventual consistency and cache</title>
      <link>https://iOliverNguyen.github.io/w/eventual.consistency/</link>
      <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/eventual.consistency/</guid>
      <description>What is it? Eventual consistency is a fancy name of doing something and only expecting the changed state after a while. And there is a guarantee that you will eventually get the expected state. Hence, consistency.
But that won&amp;rsquo;t work well with caching. And I had to deal with that recently when working with WhatsApp API.
When querying for a list of message templates from WhatsApp, we&amp;rsquo;ll cache the response for use later.</description>
    </item>
    
    <item>
      <title>Create an emoji ball-drop game with Matter.js</title>
      <link>https://iOliverNguyen.github.io/w/emoji.drop/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/emoji.drop/</guid>
      <description>You can&amp;rsquo;t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future.
‚∏∫ Steve Jobs
 Sometimes, stepping outside of your comfort zone and taking some side projects is a great way to improve as a developer. The more skills you acquire, the more you can do. And you may need them someday in the future.</description>
    </item>
    
    <item>
      <title>Front-End development without node_modules using Skypack and Snowpack</title>
      <link>https://iOliverNguyen.github.io/w/skypack/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/skypack/</guid>
      <description>Once upon a time, we could simply put an HTML and a script file into an FTP server, quickly have a working website and call it a day.
Today, we have to jump through many hoops just to get the right things in the right places. Suppose Alice wants to spend her weekend making a simple to-do app or whatever little idea she enjoys. First, she has to install a big heap of 10k npm packages files.</description>
    </item>
    
    <item>
      <title>¬µjson - A minimal JSON parser and transformer in Go</title>
      <link>https://iOliverNguyen.github.io/w/ujson/</link>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://iOliverNguyen.github.io/w/ujson/</guid>
      <description>¬µjson is a minimal JSON parser and transformer that works on unstructured (and trusted) JSON. It works by parsing input and calling the given callback function when encountering each item.
Motivation Sometimes we just want to make some minimal changes to a JSON document or do some generic transformations without fully unmarshalling it. For example, removing blacklisted keys from response JSON. Why spend all the cost on unmarshalling into a map[string]interface{} just to immediately marshal it again.</description>
    </item>
    
  </channel>
</rss>
